{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1cPl3wCsTr7HQKkFxnhA4_hc7GoxtAQfV","timestamp":1667251428958}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"yh29Qje6B09_"},"outputs":[],"source":["import os\n","import numpy as np\n","import pandas as pd\n","import numpy as np, pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn import tree, metrics"]},{"cell_type":"code","source":["df=pd.read_excel('/content/CarSales.xlsx')"],"metadata":{"id":"2AB2EQxmFPjP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"33KgQFTgFnW5","executionInfo":{"status":"ok","timestamp":1667151606301,"user_tz":-330,"elapsed":26,"user":{"displayName":"Aman Pandey","userId":"18159951850642534991"}},"outputId":"cfe80720-66ac-4750-d275-d66ad02cebda"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                       Car  Model      Km  Color      Price  \\\n","0        Alfa Romeo 156 1.6 TS Progression   2005  251000    Gri  53.500 TL   \n","1  Alfa Romeo 159 1.9 JTD Distinctive Plus   2006  275000   Füme  92.000 TL   \n","2       Alfa Romeo 159 1.9 JTD Distinctive   2008  187000  Siyah  99.750 TL   \n","3        Alfa Romeo 156 1.6 TS Distinctive   2004  239000   Füme  60.000 TL   \n","4        Alfa Romeo 147 1.6 TS Distinctive   2004  214000    NaN  55.000 TL   \n","\n","      Listing Date  Day  Month  Year  Province  District  \n","0    01 Eylül 2020    1      9  2020     İzmir  Gaziemir  \n","1    01 Eylül 2020    1      9  2020     Muğla  Marmaris  \n","2    01 Eylül 2020    1      9  2020  İstanbul   Maltepe  \n","3  31 Ağustos 2020   31      8  2020  İstanbul  Esenyurt  \n","4  31 Ağustos 2020   31      8  2020     Adana    Seyhan  "],"text/html":["\n","  <div id=\"df-2bf3f256-2810-4e0e-a8a0-2b8d2a3e524a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Car</th>\n","      <th>Model</th>\n","      <th>Km</th>\n","      <th>Color</th>\n","      <th>Price</th>\n","      <th>Listing Date</th>\n","      <th>Day</th>\n","      <th>Month</th>\n","      <th>Year</th>\n","      <th>Province</th>\n","      <th>District</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Alfa Romeo 156 1.6 TS Progression</td>\n","      <td>2005</td>\n","      <td>251000</td>\n","      <td>Gri</td>\n","      <td>53.500 TL</td>\n","      <td>01 Eylül 2020</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>2020</td>\n","      <td>İzmir</td>\n","      <td>Gaziemir</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Alfa Romeo 159 1.9 JTD Distinctive Plus</td>\n","      <td>2006</td>\n","      <td>275000</td>\n","      <td>Füme</td>\n","      <td>92.000 TL</td>\n","      <td>01 Eylül 2020</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>2020</td>\n","      <td>Muğla</td>\n","      <td>Marmaris</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Alfa Romeo 159 1.9 JTD Distinctive</td>\n","      <td>2008</td>\n","      <td>187000</td>\n","      <td>Siyah</td>\n","      <td>99.750 TL</td>\n","      <td>01 Eylül 2020</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>2020</td>\n","      <td>İstanbul</td>\n","      <td>Maltepe</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Alfa Romeo 156 1.6 TS Distinctive</td>\n","      <td>2004</td>\n","      <td>239000</td>\n","      <td>Füme</td>\n","      <td>60.000 TL</td>\n","      <td>31 Ağustos 2020</td>\n","      <td>31</td>\n","      <td>8</td>\n","      <td>2020</td>\n","      <td>İstanbul</td>\n","      <td>Esenyurt</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Alfa Romeo 147 1.6 TS Distinctive</td>\n","      <td>2004</td>\n","      <td>214000</td>\n","      <td>NaN</td>\n","      <td>55.000 TL</td>\n","      <td>31 Ağustos 2020</td>\n","      <td>31</td>\n","      <td>8</td>\n","      <td>2020</td>\n","      <td>Adana</td>\n","      <td>Seyhan</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2bf3f256-2810-4e0e-a8a0-2b8d2a3e524a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2bf3f256-2810-4e0e-a8a0-2b8d2a3e524a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2bf3f256-2810-4e0e-a8a0-2b8d2a3e524a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","df = df.applymap(str) # consider all the data as strings, I am not sure that this approach is appropiate but then I can skip imputing \n","\n","s = (df.dtypes == 'object')\n","object_cols = list(s[s].index)\n","label= df.copy()\n","label_encoder = LabelEncoder()\n","for col in object_cols:\n","    label[col] = label_encoder.fit_transform(df[col])   \n","\n","missing = label.isnull().sum()\n","print('missing values:',missing[missing > 0])\n","print('the head:\\n',label.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iJhUAudpFsBR","executionInfo":{"status":"ok","timestamp":1667151651841,"user_tz":-330,"elapsed":868,"user":{"displayName":"Aman Pandey","userId":"18159951850642534991"}},"outputId":"82104f04-a79c-4a78-fccf-1e6836504d5a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["missing values: Series([], dtype: int64)\n","the head:\n","    Car  Model    Km  Color  Price  Listing Date  Day  Month  Year  Province  \\\n","0   16     32  2982      6   2928             1    0      8     0        78   \n","1   25     33  3172      5   4094             1    0      8     0        53   \n","2   24     35  2018     18   4272             1    0      8     0        77   \n","3   15     31  2836      5   3170           215   24      7     0        77   \n","4    8     31  2505     23   2982           215   24      7     0         0   \n","\n","   District  \n","0       253  \n","1       448  \n","2       443  \n","3       233  \n","4       557  \n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","dftrain, dftest = train_test_split(label, test_size=0.2) # randomly split df to train/test data with 80/20 proportion\n","\n","#Let's check if prices distribution is same in test and train data\n","plt.figure(figsize=(10,5))\n","plt.subplot(1,2,1), dftrain['Price'].hist(bins=10)\n","\n","plt.figure(figsize=(10,5))\n","plt.subplot(1,2,2),dftest['Price'].hist(bins=10)"],"metadata":{"id":"mTCcTGV3FyqC","colab":{"base_uri":"https://localhost:8080/","height":661},"executionInfo":{"status":"ok","timestamp":1667151695980,"user_tz":-330,"elapsed":1207,"user":{"displayName":"Aman Pandey","userId":"18159951850642534991"}},"outputId":"aa94db60-f270-488d-fa78-3c9d05114d05"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<matplotlib.axes._subplots.AxesSubplot at 0x7f191a67c350>,\n"," <matplotlib.axes._subplots.AxesSubplot at 0x7f191a67c350>)"]},"metadata":{},"execution_count":6},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAASwAAAEyCAYAAABAoe2eAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAUM0lEQVR4nO3df4xd5X3n8fenOBA2dGMTsiMLozVRrI2ovEnQCIhSVRNQzY9UNX+kEREqDotkaZftplpLXbOVFjVpJLIKTQNq01qLd52KlrBpI1uELesCo1X/4EcpBPOjrCcUhC2DtzG460RN1+l3/7iPyY3rYe7YM555rt8vaTTnfM9zzjzfmTsfn3PPveNUFZLUg59a6glI0qgMLEndMLAkdcPAktQNA0tSNwwsSd0YKbCSrEzyzSR/leTFJB9Lcn6S3Un2ts+r2tgkuSvJTJJnk1w6dJxNbfzeJJsWqylJ42nUM6yvAn9aVR8CPgy8CGwFHq6qdcDDbR3gWmBd+9gMfA0gyfnA7cDlwGXA7cdCTpJGMWdgJXkv8HPAPQBV9fdV9RawEdjRhu0Arm/LG4Gv18BjwMokq4Grgd1Vdaiq3gR2A9csaDeSxtqKEcZcDPwf4L8m+TDwFPA5YKKqDrQxrwMTbflC4LWh/fe12mz1WV1wwQW1du3aEaY48P3vf5/3vOc9I4/vhX31Yxx7gtPb11NPPfU3VfX+E20bJbBWAJcCv1JVjyf5Kj++/AOgqirJgrzHJ8lmBpeSTExM8OUvf3nkfY8cOcJ55523ENNYVuyrH+PYE5zevj7xiU+8Otu2UQJrH7Cvqh5v699kEFhvJFldVQfaJd/Btn0/cNHQ/mtabT8wdVx9+vgvVlXbgG0Ak5OTNTU1dfyQWU1PTzOf8b2wr36MY0+wfPqa8zmsqnodeC3Jv2ilq4AXgF3AsTt9m4CdbXkXcFO7W3gFcLhdOj4EbEiyqj3ZvqHVJGkko5xhAfwKcG+Ss4GXgZsZhN39SW4BXgU+3cY+CFwHzAA/aGOpqkNJvgA82cZ9vqoOLUgXks4IIwVWVT0DTJ5g01UnGFvArbMcZzuwfT4TlKRjfKW7pG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqxqgvHO3Cnv2H+ezWby/KsV+545OLclxJo/MMS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd0wsCR1Y6zeSyjp5Kyd4z24W9YfPen36S7k+3A9w5LUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd3wdVhSJ+Z6rdSZwDMsSd0wsCR1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjdGCqwkryTZk+SZJH/Raucn2Z1kb/u8qtWT5K4kM0meTXLp0HE2tfF7k2xanJYkjav5nGF9oqo+UlWTbX0r8HBVrQMebusA1wLr2sdm4GswCDjgduBy4DLg9mMhJ0mjOJVLwo3Ajra8A7h+qP71GngMWJlkNXA1sLuqDlXVm8Bu4JpT+PqSzjCjBlYB/zPJU0k2t9pEVR1oy68DE235QuC1oX33tdpsdUkayahvfv7Zqtqf5J8Bu5P81fDGqqoktRATaoG4GWBiYoLp6emR9504d/DH8hfDfOax0I4cObKkX3+xjGNfi9nTYj22R3Eqv1sL+f0YKbCqan/7fDDJtxg8B/VGktVVdaBd8h1sw/cDFw3tvqbV9gNTx9WnT/C1tgHbACYnJ2tqaur4IbO6+96d3Llncf4AxSs3jj6PhTY9Pc18vg+9GMe+FrOnk/1faxbClvVHT/p3ayF/d+a8JEzyniQ/fWwZ2AA8B+wCjt3p2wTsbMu7gJva3cIrgMPt0vEhYEOSVe3J9g2tJkkjGSUyJ4BvJTk2/g+r6k+TPAncn+QW4FXg0238g8B1wAzwA+BmgKo6lOQLwJNt3Oer6tCCdSJp7M0ZWFX1MvDhE9S/B1x1gnoBt85yrO3A9vlPU5J8pbukjhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrqxOH+eUzpD7dl/eEn/Mui48wxLUjc8wxrR2kX8V/OVOz65aMeWxolnWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsjB1aSs5I8neSBtn5xkseTzCT5RpKzW/2ctj7Ttq8dOsZtrf5SkqsXuhlJ420+Z1ifA14cWv8S8JWq+iDwJnBLq98CvNnqX2njSHIJcAPwM8A1wO8mOevUpi/pTDJSYCVZA3wS+C9tPcCVwDfbkB3A9W15Y1unbb+qjd8I3FdVP6yqvwZmgMsWoglJZ4ZRz7B+G/g14B/a+vuAt6rqaFvfB1zYli8EXgNo2w+38W/XT7CPJM1pzv+XMMkvAAer6qkkU4s9oSSbgc0AExMTTE9Pj7zvxLmwZf3RuQcuM3P1eOTIkXl9H3oxjn31+hicy6n0tZA/41H+I9WPA7+Y5Drg3cA/Bb4KrEyyop1FrQH2t/H7gYuAfUlWAO8FvjdUP2Z4n7dV1TZgG8Dk5GRNTU2N3Mzd9+7kzj39/d+wr9w49Y7bp6enmc/3oRfj2Fevj8G5bFl/9KT7muvxPR9zXhJW1W1Vtaaq1jJ40vyRqroReBT4VBu2CdjZlne1ddr2R6qqWv2GdhfxYmAd8MSCdSJp7J3KPwX/AbgvyW8CTwP3tPo9wB8kmQEOMQg5qur5JPcDLwBHgVur6ken8PUlnWHmFVhVNQ1Mt+WXOcFdvqr6O+CXZtn/i8AX5ztJSQJf6S6pIwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkroxfu8hkOawduu3F+3YW9Yv2qGFZ1iSOmJgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6MWdgJXl3kieSfCfJ80l+o9UvTvJ4kpkk30hydquf09Zn2va1Q8e6rdVfSnL1YjUlaTyNcob1Q+DKqvow8BHgmiRXAF8CvlJVHwTeBG5p428B3mz1r7RxJLkEuAH4GeAa4HeTnLWQzUgab3MGVg0caavvah8FXAl8s9V3ANe35Y1tnbb9qiRp9fuq6odV9dfADHDZgnQh6YywYpRB7UzoKeCDwO8A3wXeqqqjbcg+4MK2fCHwGkBVHU1yGHhfqz82dNjhfYa/1mZgM8DExATT09MjNzNxLmxZf3TugcvMXD0eOXJkXt+HXixVX4v5GOn1MTiXU+lrIX/GIwVWVf0I+EiSlcC3gA8t2Az+8dfaBmwDmJycrKmpqZH3vfvendy5Z6SWlpc933/HzVvW/4g7//ydx8zmlTs+eVL7nQ7T09PM5+e7UD679duLduwt64/2+Ricw6n09cqNUws2j3nNoKreSvIo8DFgZZIV7SxrDbC/DdsPXATsS7ICeC/wvaH6McP7SD9h7SKGivo1yl3C97czK5KcC/w88CLwKPCpNmwTsLMt72rrtO2PVFW1+g3tLuLFwDrgiYVqRNL4G+UMazWwoz2P9VPA/VX1QJIXgPuS/CbwNHBPG38P8AdJZoBDDO4MUlXPJ7kfeAE4CtzaLjUlaSRzBlZVPQt89AT1lznBXb6q+jvgl2Y51heBL85/mpLkK90ldcTAktQNA0tSNwwsSd0wsCR1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd0wsCR1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd0wsCR1w8CS1I0VSz0B9Wvt1m+f0v5b1h/ls6d4DJ1ZPMOS1A0DS1I3DCxJ3fA5rDF3qs8zScuJZ1iSujFnYCW5KMmjSV5I8nySz7X6+Ul2J9nbPq9q9SS5K8lMkmeTXDp0rE1t/N4kmxavLUnjaJQzrKPAlqq6BLgCuDXJJcBW4OGqWgc83NYBrgXWtY/NwNdgEHDA7cDlwGXA7cdCTpJGMWdgVdWBqvrLtvx/gReBC4GNwI42bAdwfVveCHy9Bh4DViZZDVwN7K6qQ1X1JrAbuGZBu5E01ub1HFaStcBHgceBiao60Da9Dky05QuB14Z229dqs9UlaSQj3yVMch7wx8CvVtXfJnl7W1VVklqICSXZzOBSkomJCaanp0fed+Lcwaunx4199WMce4JT62s+v8NzGSmwkryLQVjdW1V/0spvJFldVQfaJd/BVt8PXDS0+5pW2w9MHVefPv5rVdU2YBvA5ORkTU1NHT9kVnffu5M794zfKzW2rD9qX50Yx57g1Pp65capBZvHKHcJA9wDvFhVvzW0aRdw7E7fJmDnUP2mdrfwCuBwu3R8CNiQZFV7sn1Dq0nSSEaJzI8DvwzsSfJMq/1H4A7g/iS3AK8Cn27bHgSuA2aAHwA3A1TVoSRfAJ5s4z5fVYcWpAtJZ4Q5A6uq/hzILJuvOsH4Am6d5Vjbge3zmaAkHeMr3SV1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd0wsCR1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd0wsCR1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd2YM7CSbE9yMMlzQ7Xzk+xOsrd9XtXqSXJXkpkkzya5dGifTW383iSbFqcdSeNslDOs/wZcc1xtK/BwVa0DHm7rANcC69rHZuBrMAg44HbgcuAy4PZjISdJo5ozsKrqfwGHjitvBHa05R3A9UP1r9fAY8DKJKuBq4HdVXWoqt4EdvOPQ1CS3tHJPoc1UVUH2vLrwERbvhB4bWjcvlabrS5JI1txqgeoqkpSCzEZgCSbGVxOMjExwfT09Mj7TpwLW9YfXaipLBv21Y9x7AlOra/5/A7P5WQD640kq6vqQLvkO9jq+4GLhsatabX9wNRx9ekTHbiqtgHbACYnJ2tqaupEw07o7nt3cueeU87gZWfL+qP21Ylx7AlOra9XbpxasHmc7CXhLuDYnb5NwM6h+k3tbuEVwOF26fgQsCHJqvZk+4ZWk6SRzRmZSf6IwdnRBUn2Mbjbdwdwf5JbgFeBT7fhDwLXATPAD4CbAarqUJIvAE+2cZ+vquOfyJekdzRnYFXVZ2bZdNUJxhZw6yzH2Q5sn9fsJGmIr3SX1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd0wsCR1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd0wsCR1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd0wsCR147QHVpJrkryUZCbJ1tP99SX167QGVpKzgN8BrgUuAT6T5JLTOQdJ/TrdZ1iXATNV9XJV/T1wH7DxNM9BUqdOd2BdCLw2tL6v1SRpTiuWegLHS7IZ2NxWjyR5aR67XwD8zcLPamn9O/vqxjj2BKfWV740713++WwbTndg7QcuGlpf02pvq6ptwLaTOXiSv6iqyZOf3vJkX/0Yx55g+fR1ui8JnwTWJbk4ydnADcCu0zwHSZ06rWdYVXU0yb8FHgLOArZX1fOncw6S+nXan8OqqgeBBxfp8Cd1KdkB++rHOPYEy6SvVNVSz0GSRuJbcyR1YywCq7e3+yTZnuRgkueGaucn2Z1kb/u8qtWT5K7W27NJLh3aZ1MbvzfJpqXoZViSi5I8muSFJM8n+Vyrd91bkncneSLJd1pfv9HqFyd5vM3/G+1GEknOaeszbfvaoWPd1uovJbl6aTr6sSRnJXk6yQNtfXn3VFVdfzB48v67wAeAs4HvAJcs9bzmmPPPAZcCzw3V/jOwtS1vBb7Ulq8D/gcQ4Arg8VY/H3i5fV7VllctcV+rgUvb8k8D/5vBW7C67q3N77y2/C7g8Tbf+4EbWv33gH/dlv8N8Htt+QbgG235kvb4PAe4uD1uz1rin9m/B/4QeKCtL+ueluwbtYDf8I8BDw2t3wbcttTzGmHea48LrJeA1W15NfBSW/594DPHjwM+A/z+UP0nxi2HD2An8PPj1BvwT4C/BC5n8ELKFcc/DhncBf9YW17RxuX4x+bwuCXqZQ3wMHAl8ECb47LuaRwuCcfl7T4TVXWgLb8OTLTl2fpb1n23S4aPMjgb6b63dun0DHAQ2M3gTOKtqjrahgzP8e35t+2Hgfex/Pr6beDXgH9o6+9jmfc0DoE1dmrwT1W3t2+TnAf8MfCrVfW3w9t67a2qflRVH2FwVnIZ8KElntIpSfILwMGqemqp5zIf4xBYc77dpxNvJFkN0D4fbPXZ+luWfSd5F4Owureq/qSVx6I3gKp6C3iUweXSyiTHXss4PMe359+2vxf4Hsurr48Dv5jkFQZ/NeVK4Kss857GIbDG5e0+u4Bjd8M2MXj+51j9pnZH7QrgcLu8egjYkGRVu+u2odWWTJIA9wAvVtVvDW3qurck70+ysi2fy+B5uRcZBNen2rDj+zrW76eAR9qZ5S7ghnbH7WJgHfDE6eniJ1XVbVW1pqrWMvideaSqbmS597TUT2Iu0JOH1zG4I/Vd4NeXej4jzPePgAPA/2NwzX8Lg+cDHgb2An8GnN/GhsEfPfwusAeYHDrOvwJm2sfNy6Cvn2Vwufcs8Ez7uK733oB/CTzd+noO+E+t/gEGv5wzwH8Hzmn1d7f1mbb9A0PH+vXW70vAtUv9M2tzmuLHdwmXdU++0l1SN8bhklDSGcLAktQNA0tSNwwsSd0wsCR1w8CS1A0DS1I3DCxJ3fj/wTXhlwc9DOMAAAAASUVORK5CYII=\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAASwAAAEvCAYAAAD/6fzbAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAUiElEQVR4nO3df4xl5X3f8fenrMHYbmGBdLraXXXWzSoRzaYNGmEsV9HItBiw5eUPxwKheu0grdqQxCkrOUssFTVRJNyWODZKnWwDNZa2GOK42pVDQrfYI6tSwTb+wYIJYUzWZleLNzE/0rWVupN8+8d9sK+3uzt35s7szDPzfklXc85znnPu871z5zPnx/2RqkKSevB3VnoAkjQqA0tSNwwsSd0wsCR1w8CS1A0DS1I3Nqz0AM7msssuq8nJyZH7f/e73+X1r3/98g1ohVhXP9ZiTXBu63r88cf/sqp+7HTLVnVgTU5O8qUvfWnk/jMzM0xPTy/fgFaIdfVjLdYE57auJN880zIPCSV1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndmDewktyb5ESSJ0+zbE+SSnJZm0+SjyaZTfJEkiuG+u5K8my77VraMiStB6PsYX0cuPbUxiRbgWuAbw01Xwdsb7fdwMda30uAO4A3AVcCdyTZOM7AJa0/8wZWVX0eePE0iz4MfAAY/ozlncAnauBR4OIkm4C3AYeq6sWqegk4xGlCUJLOZlHvJUyyEzhWVV9LMrxoM/D80PzR1nam9tNtezeDvTMmJiaYmZkZeVwnXnyFu/cfGLn/QuzYfNGybHcUJ0+eXNDj0Iu1WNdarAlWT10LDqwkrwN+jcHh4JKrqn3APoCpqalayBsu795/gLsOL8/7uY/cPPo4lppvqO3HWqwJVk9di7lK+I+AbcDXkhwBtgBfTvIPgGPA1qG+W1rbmdolaWQLDqyqOlxVf7+qJqtqksHh3RVV9QJwEHhPu1p4FfBKVR0HHgauSbKxnWy/prVJ0shGeVnD/cD/An4iydEkt5yl+0PAc8As8J+BXwCoqheB3wC+2G6/3tokaWTznvCpqpvmWT45NF3ArWfody9w7wLHJ6mZ3PtHy7btI3e+fdm2vZR8pbukbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6sTyfxSKpK/O97WfPjjneO8Zbg5bqrT/uYUnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSerGvIGV5N4kJ5I8OdT2H5L8aZInkvy3JBcPLbs9yWySZ5K8baj92tY2m2Tv0pciaa0bZQ/r48C1p7QdAn6qqn4a+DPgdoAklwM3Av+4rfOfkpyX5Dzgd4DrgMuBm1pfSRrZvIFVVZ8HXjyl7b9X1VybfRTY0qZ3Ap+sqv9TVX8OzAJXtttsVT1XVd8HPtn6StLIluJLKH4eeKBNb2YQYK862toAnj+l/U2n21iS3cBugImJCWZmZkYeyMSFgw/LXw4LGcdSO3ny5Ire/3JZi3UtZ03L9dwexbh/W0v1mIwVWEk+CMwB+5dkNEBV7QP2AUxNTdX09PTI6969/wB3HV6eLwI6cvPo41hqMzMzLORx6MVarGs5axrnW2vGtWfH3Fh/W0v197PoESR5L/AO4OqqqtZ8DNg61G1La+Ms7ZI0kkW9rCHJtcAHgHdW1feGFh0EbkxyQZJtwHbgC8AXge1JtiU5n8GJ+YPjDV3SejPvHlaS+4Fp4LIkR4E7GFwVvAA4lATg0ar6V1X1VJIHga8zOFS8tar+pm3nF4GHgfOAe6vqqWWoR9IaNm9gVdVNp2m+5yz9fxP4zdO0PwQ8tKDRSdIQX+kuqRsGlqRuLM9rANagyWW8pHzkzrcv27altcQ9LEndMLAkdcPAktQNA0tSNwwsSd0wsCR1w8CS1A0DS1I3DCxJ3TCwJHXDwJLUDQNLUjd887O0hA4fe2VFP3t9rXMPS1I3DCxJ3TCwJHXDwJLUDQNLUjcMLEndMLAkdcPAktQNA0tSNwwsSd0wsCR1Y97ASnJvkhNJnhxquyTJoSTPtp8bW3uSfDTJbJInklwxtM6u1v/ZJLuWpxxJa9koe1gfB649pW0v8EhVbQceafMA1wHb22038DEYBBxwB/Am4ErgjldDTpJGNW9gVdXngRdPad4J3Nem7wNuGGr/RA08ClycZBPwNuBQVb1YVS8Bh/j/Q1CSzmqx57Amqup4m34BmGjTm4Hnh/odbW1napekkY39eVhVVUlqKQYDkGQ3g8NJJiYmmJmZGXndiQthz465pRrKOTNfjSdPnlzQ49CLtVhXr8/B+Yxb11L9nhcbWN9OsqmqjrdDvhOt/RiwdajfltZ2DJg+pX3mdBuuqn3APoCpqamanp4+XbfTunv/Ae463N9nEh65efqsy2dmZljI49CLtVhXr8/B+ezZMTdWXfM9x0e12EPCg8CrV/p2AQeG2t/TrhZeBbzSDh0fBq5JsrGdbL+mtUnSyOaNzCT3M9g7uizJUQZX++4EHkxyC/BN4N2t+0PA9cAs8D3gfQBV9WKS3wC+2Pr9elWdeiJfks5q3sCqqpvOsOjq0/Qt4NYzbOde4N4FjU6ShvhKd0ndMLAkdcPAktSNtXf9VZrH5DJ+b+CeHcu2aeEelqSOGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRtjBVaSf5PkqSRPJrk/yWuTbEvyWJLZJA8kOb/1vaDNz7blk0tRgKT1Y9GBlWQz8MvAVFX9FHAecCPwIeDDVfXjwEvALW2VW4CXWvuHWz9JGtm4h4QbgAuTbABeBxwH3gp8qi2/D7ihTe9s87TlVyfJmPcvaR1ZdGBV1THgPwLfYhBUrwCPAy9X1VzrdhTY3KY3A8+3deda/0sXe/+S1p8Ni10xyUYGe03bgJeBPwCuHXdASXYDuwEmJiaYmZkZed2JC2HPjrn5O64y89V48uTJBT0OvVipupbzOdLrc3A+49a1VL/nRQcW8M+BP6+qvwBI8mngLcDFSTa0vagtwLHW/xiwFTjaDiEvAr5z6karah+wD2Bqaqqmp6dHHtDd+w9w1+FxSloZR26ePuvymZkZFvI49GKl6nrv3j9atm3v2THX5XNwPuPWNd9zfFTjnMP6FnBVkte1c1FXA18HPge8q/XZBRxo0wfbPG35Z6uqxrh/SevMOOewHmNw8vzLwOG2rX3ArwK3JZllcI7qnrbKPcClrf02YO8Y45a0Do2171pVdwB3nNL8HHDlafr+NfBz49yfpPXNV7pL6oaBJakbBpakbhhYkrphYEnqxtp7hZvWhMllfHGn+uUelqRuGFiSumFgSeqGgSWpG550XwXmO8G8Z8fcoj9h4Midb1/UetJq5B6WpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbowVWEkuTvKpJH+a5Okkb05ySZJDSZ5tPze2vkny0SSzSZ5IcsXSlCBpvRh3D+sjwJ9U1U8C/wR4GtgLPFJV24FH2jzAdcD2dtsNfGzM+5a0ziw6sJJcBPwscA9AVX2/ql4GdgL3tW73ATe06Z3AJ2rgUeDiJJsWPXJJ6844e1jbgL8A/kuSryT5/SSvByaq6njr8wIw0aY3A88PrX+0tUnSSMb51pwNwBXAL1XVY0k+wg8P/wCoqkpSC9lokt0MDhmZmJhgZmZm5HUnLhx8w8xaM05dC3n8zrWTJ0+ecXy9/h59Dp7eUj0Pxwmso8DRqnqszX+KQWB9O8mmqjreDvlOtOXHgK1D629pbT+iqvYB+wCmpqZqenp65AHdvf8Adx1ee99ctmfH3KLrOnLz9NIOZgnNzMxwpt/vYr/WbKWN87tazcata6meh4s+JKyqF4Dnk/xEa7oa+DpwENjV2nYBB9r0QeA97WrhVcArQ4eOkjSvcf8V/BKwP8n5wHPA+xiE4INJbgG+Cby79X0IuB6YBb7X+krSyMYKrKr6KjB1mkVXn6ZvAbeOc3+S1re1d7CtHzG5is8F7dkx1+25Kq0M35ojqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSujF2YCU5L8lXknymzW9L8liS2SQPJDm/tV/Q5mfb8slx71vS+rIUe1jvB54emv8Q8OGq+nHgJeCW1n4L8FJr/3DrJ0kjGyuwkmwB3g78fpsP8FbgU63LfcANbXpnm6ctv7r1l6SRjLuH9dvAB4C/bfOXAi9X1VybPwpsbtObgecB2vJXWn9JGsmGxa6Y5B3Aiap6PMn0Ug0oyW5gN8DExAQzMzMjrztxIezZMTd/x85YVz/WYk0wfl0L+Ts+m0UHFvAW4J1JrgdeC/w94CPAxUk2tL2oLcCx1v8YsBU4mmQDcBHwnVM3WlX7gH0AU1NTNT09PfKA7t5/gLsOj1PS6rRnx5x1dWIt1gTj13Xk5uklGceiDwmr6vaq2lJVk8CNwGer6mbgc8C7WrddwIE2fbDN05Z/tqpqsfcvaf1Zjtdh/SpwW5JZBueo7mnt9wCXtvbbgL3LcN+S1rAl2Xetqhlgpk0/B1x5mj5/DfzcUtyfpPXJV7pL6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrqx6MBKsjXJ55J8PclTSd7f2i9JcijJs+3nxtaeJB9NMpvkiSRXLFURktaHcfaw5oA9VXU5cBVwa5LLgb3AI1W1HXikzQNcB2xvt93Ax8a4b0nr0KIDq6qOV9WX2/T/Bp4GNgM7gftat/uAG9r0TuATNfAocHGSTYseuaR1Z0nOYSWZBH4GeAyYqKrjbdELwESb3gw8P7Ta0dYmSSPZMO4GkrwB+EPgV6rqr5L8YFlVVZJa4PZ2MzhkZGJigpmZmZHXnbgQ9uyYW8jddcG6+rEWa4Lx61rI3/HZjBVYSV7DIKz2V9WnW/O3k2yqquPtkO9Eaz8GbB1afUtr+xFVtQ/YBzA1NVXT09Mjj+fu/Qe46/DYGbzq7NkxZ12dWIs1wfh1Hbl5eknGMc5VwgD3AE9X1W8NLToI7GrTu4ADQ+3vaVcLrwJeGTp0lKR5jfOv4C3AvwQOJ/lqa/s14E7gwSS3AN8E3t2WPQRcD8wC3wPeN8Z9S1qHFh1YVfU/gZxh8dWn6V/ArYu9P0nyle6SumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG4YWJK6YWBJ6oaBJakbBpakbhhYkrphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG6c88BKcm2SZ5LMJtl7ru9fUr/OaWAlOQ/4HeA64HLgpiSXn8sxSOrXud7DuhKYrarnqur7wCeBned4DJI6da4DazPw/ND80dYmSfPasNIDOFWS3cDuNnsyyTMLWP0y4C+XflQr65etqxtrsSYYv658aEHd/+GZFpzrwDoGbB2a39LafqCq9gH7FrPxJF+qqqnFD291sq5+rMWaYPXUda4PCb8IbE+yLcn5wI3AwXM8BkmdOqd7WFU1l+QXgYeB84B7q+qpczkGSf065+ewquoh4KFl2vyiDiU7YF39WIs1wSqpK1W10mOQpJH41hxJ3VgTgdXb232S3JvkRJInh9ouSXIoybPt58bWniQfbbU9keSKoXV2tf7PJtm1ErUMS7I1yeeSfD3JU0ne39q7ri3Ja5N8IcnXWl3/rrVvS/JYG/8D7UISSS5o87Nt+eTQtm5v7c8kedvKVPRDSc5L8pUkn2nzq7umqur6xuDk/TeANwLnA18DLl/pcc0z5p8FrgCeHGr798DeNr0X+FCbvh74YyDAVcBjrf0S4Ln2c2Ob3rjCdW0CrmjTfxf4MwZvweq6tja+N7Tp1wCPtfE+CNzY2n8X+Ndt+heA323TNwIPtOnL2/PzAmBbe96et8K/s9uA/wp8ps2v6ppW7IFawgf8zcDDQ/O3A7ev9LhGGPfkKYH1DLCpTW8CnmnTvwfcdGo/4Cbg94baf6TfargBB4B/sZZqA14HfBl4E4MXUm449XnI4Cr4m9v0htYvpz43h/utUC1bgEeAtwKfaWNc1TWthUPCtfJ2n4mqOt6mXwAm2vSZ6lvVdbdDhp9hsDfSfW3t0OmrwAngEIM9iZeraq51GR7jD8bflr8CXMrqq+u3gQ8Af9vmL2WV17QWAmvNqcG/qm4v3yZ5A/CHwK9U1V8NL+u1tqr6m6r6pwz2Sq4EfnKFhzSWJO8ATlTV4ys9loVYC4E179t9OvHtJJsA2s8Trf1M9a3KupO8hkFY7a+qT7fmNVEbQFW9DHyOweHSxUlefS3j8Bh/MP62/CLgO6yuut4CvDPJEQafmvJW4COs8prWQmCtlbf7HARevRq2i8H5n1fb39OuqF0FvNIOrx4GrkmysV11u6a1rZgkAe4Bnq6q3xpa1HVtSX4sycVt+kIG5+WeZhBc72rdTq3r1XrfBXy27VkeBG5sV9y2AduBL5ybKn5UVd1eVVuqapLB38xnq+pmVntNK30Sc4lOHl7P4IrUN4APrvR4Rhjv/cBx4P8yOOa/hcH5gEeAZ4H/AVzS+obBhx5+AzgMTA1t5+eB2XZ73yqo658xONx7Avhqu13fe23ATwNfaXU9Cfzb1v5GBn+cs8AfABe09te2+dm2/I1D2/pgq/cZ4LqV/p21MU3zw6uEq7omX+kuqRtr4ZBQ0jphYEnqhoElqRsGlqRuGFiSumFgSeqGgSWpGwaWpG78P7Up9Xdju/VBAAAAAElFTkSuQmCC\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["\n","from sklearn.tree import DecisionTreeRegressor\n","\n","features = list(label.columns)\n","features.remove('Price') \n","train_y = dftrain['Price'] \n","train_x = dftrain[features] \n","test_x=dftest[features] \n","test_y=dftest['Price'] \n","model = DecisionTreeRegressor(random_state=1)\n","model.fit(train_x, train_y)\n","predicted_prices = model.predict(test_x)\n","predicted_prices=pd.DataFrame(predicted_prices)"],"metadata":{"id":"2YBTnGY6Gqo8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Calculate mae \n","from sklearn.metrics import mean_absolute_error\n","mae = mean_absolute_error(predicted_prices, test_y)\n","print('mean absolute error: ',mae)\n","print('mean price in df:', label['Price'].mean(), '\\nmae/mean, %:',100*mae/label['Price'].mean())"],"metadata":{"id":"SED_mEQHGu0V","executionInfo":{"status":"ok","timestamp":1667151736152,"user_tz":-330,"elapsed":14,"user":{"displayName":"Aman Pandey","userId":"18159951850642534991"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2dd827db-b301-40a4-bdb2-6370db549889"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["mean absolute error:  554.2979227588988\n","mean price in df: 2235.550731067863 \n","mae/mean, %: 24.794692200705526\n"]}]}]}